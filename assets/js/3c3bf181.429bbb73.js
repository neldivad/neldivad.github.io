"use strict";(self.webpackChunknelverse=self.webpackChunknelverse||[]).push([[7088],{3996:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"prod-synthv/advanced/timestamp-lyrics/timestamp-lyrics","title":"(SVScript) Timestamp lyrics","description":"Had an annoying problem, which is to approximate the timestamp of the lyrics when I want to insert lyrics into my videos.","source":"@site/docs/prod-synthv/advanced/timestamp-lyrics/timestamp-lyrics.mdx","sourceDirName":"prod-synthv/advanced/timestamp-lyrics","slug":"/prod-synthv/advanced/timestamp-lyrics/","permalink":"/docs/prod-synthv/advanced/timestamp-lyrics/","draft":false,"unlisted":false,"editUrl":"https://github.com/neldivad/neldivad.github.io/tree/main/docs/prod-synthv/advanced/timestamp-lyrics/timestamp-lyrics.mdx","tags":[],"version":"current","lastUpdatedAt":1741872635000,"frontMatter":{"title":"(SVScript) Timestamp lyrics"},"sidebar":"tutorialSidebar","previous":{"title":"Using Synth V scripts","permalink":"/docs/prod-synthv/advanced/svscripts/"},"next":{"title":"Basic","permalink":"/docs/prod-synthv/basic/"}}');var s=r(4848),i=r(8453);const o={title:"(SVScript) Timestamp lyrics"},a=void 0,c={},l=[];function d(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Had an annoying problem, which is to approximate the timestamp of the lyrics when I want to insert lyrics into my videos."}),"\n",(0,s.jsx)(n.p,{children:"Traditional method is to literally play the song live while editing the words and timing one by one."}),"\n",(0,s.jsx)(n.p,{children:"If you had already written your lyrics in Synthesizer V, using the script below will return you the timestamp for each lyric."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Timestamp automatically adjusts based on the BPM of the project."}),"\n",(0,s.jsx)(n.li,{children:"Timestamp returns for each syllable. (No clustered sentences like a transcript. I don't want to over engineer it)"}),"\n",(0,s.jsx)(n.li,{children:"Offset parameter if your video/music is not in sync with the score."}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Show preview"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Script Preview",src:r(8096).A+"",width:"1629",height:"918"})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)("summary",{children:["Show ",(0,s.jsx)(n.code,{children:"TimestampLyrics.js"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const SCRIPT_TITLE = "Timestamp Extractor";\r\nvar message = "Retrieves the timestamp for each lyric.\\n" +\r\n"\\n" +\r\n"Use offset if your video/music is not in sync with the score.\\n" +\r\n"\\n" +\r\n"Timestamp automatically adjusts based on the BPM of the project.\\n" +\r\n"\\n" +\r\n"Script has not tested with tempo automation. Use at your own risk.";\r\n\r\n\r\nfunction getClientInfo() {\r\n    return {\r\n        name: SV.T(SCRIPT_TITLE),\r\n        category: "Lyrics Processing",\r\n        author: "NEL-V",\r\n        versionNumber: 1,\r\n        minEditorVersion: 65536\r\n    };\r\n}\r\n\r\nfunction secondsToMinutes(seconds) {\r\n  return (Math.floor(seconds / 60) || 0) + \':\' + ((seconds % 60).toFixed(2));\r\n}\r\n\r\nfunction main() {\r\n  // Get the project\'s BPM\r\n  var project = SV.getProject();\r\n  var timeAxis;\r\n  if (project) {\r\n      timeAxis = project.getTimeAxis();\r\n  }\r\n  \r\n  // Input form with a text field for the offset\r\n  var inputForm = {\r\n    "title": SV.T(SCRIPT_TITLE),\r\n    "message": message,\r\n    "buttons" : "OkCancel",\r\n    "widgets": [\r\n      {\r\n        "name": "offset",\r\n        "type": "TextBox",\r\n        "label": SV.T("Offset (seconds)"),\r\n        "default": "0",\r\n      }\r\n    ]\r\n  };\r\n\r\n  // form submission\r\n  var result = SV.showCustomDialog(inputForm);\r\n  if (result.status == "Cancel") {\r\n    SV.finish();\r\n    return;\r\n  }\r\n  if (result.status == "Ok") {\r\n    var offsetSeconds = result.answers.offset;\r\n  }\r\n\r\n  // form validation\r\n  var offsetSeconds = parseFloat(result.answers.offset);\r\n  if (isNaN(offsetSeconds)) {\r\n      SV.showMessageBox(SV.T(SCRIPT_TITLE), SV.T("Please enter a valid numeric value for the offset."));\r\n      SV.finish();\r\n      return;\r\n  }\r\n\r\n  // Get the current selection\r\n  var selection = SV.getMainEditor().getSelection();\r\n  var selectedNotes = selection.getSelectedNotes();\r\n  \r\n  // No notes selected.\r\n  if (selectedNotes.length === 0) {\r\n      SV.showMessageBox(SV.T(SCRIPT_TITLE), SV.T("No lyrics found in the track."));\r\n      SV.finish();\r\n      return;\r\n  }\r\n  var lyricsMerged = "";\r\n\r\n  // Iterate through selected notes and merge lyrics\r\n  for (var i = 0; i < selectedNotes.length; i++) {\r\n      var note = selectedNotes[i];\r\n      var currOnset = note.getOnset();\r\n      var currLyrics = note.getLyrics() || "";\r\n\r\n      // Convert to seconds using TimeAxis and offset\r\n      var noteStart = currOnset;\r\n      var noteEnd = note.getEnd();\r\n      var noteStartSeconds = timeAxis.getSecondsFromBlick(noteStart) + offsetSeconds;\r\n      var noteEndSeconds = timeAxis.getSecondsFromBlick(noteEnd) + offsetSeconds;\r\n\r\n      if (currLyrics.length > 0) {\r\n        // Handle special cases.\r\n        if (currLyrics[0] === ".") {\r\n            // Phonetic input.\r\n            lyricsMerged += " (" + noteStartSeconds.toFixed(2) + ", " + noteEndSeconds.toFixed(2) + "): " + currLyrics.substring(1) + "\\n";\r\n        } else if (currLyrics === "-") {\r\n            // Legato - do nothing\r\n        } else if (currLyrics === "+") {\r\n            // Syllable break - do nothing\r\n        } else {\r\n            lyricsMerged += " (" + secondsToMinutes(noteStartSeconds) + " - " + secondsToMinutes(noteEndSeconds) + "): " + currLyrics + "\\n";\r\n        }\r\n      }\r\n    lastEnd = note.getEnd();\r\n  }\r\n\r\n  // Create the custom dialog form\r\n  var outputForm = {\r\n    "title": SV.T(SCRIPT_TITLE),\r\n    "buttons": "Ok",\r\n    "widgets": [\r\n        {\r\n            "name": "lyrics",\r\n            "type": "TextArea",\r\n            "label": SV.T("Lyrics"),\r\n            "width": 400,\r\n            "height": 300,\r\n            "multiline": true,\r\n            "readonly": true,\r\n            "default": lyricsMerged || SV.T("No lyrics found in the track.")\r\n        }\r\n    ]\r\n  };\r\n\r\n  // Show the custom dialog\r\n  SV.showCustomDialog(outputForm);\r\n  SV.finish();\r\n}\r\n\n'})})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8096:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/preview1-f49168d46e689a6f362ebb10feed9f7f.JPG"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);