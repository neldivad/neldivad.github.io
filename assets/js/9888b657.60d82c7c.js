"use strict";(self.webpackChunknelverse=self.webpackChunknelverse||[]).push([[4012],{63:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/1-1bab5948dd0d6c07b60fcae7bd0e7485.JPG"},5005:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/3-96043bfc4a258ab92c0c4dce2031866e.JPG"},5923:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/5-893374ad6aff3a5503771a8defffa2b1.JPG"},6688:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/2-dda3ad0c5699e4654876180d3b0c0f2b.JPG"},7854:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"production/advanced/cleanup-markers/cleanup-markers","title":"Cleanup Markers (Script)","description":"Problem","source":"@site/docs/production/2-advanced/cleanup-markers/cleanup-markers.mdx","sourceDirName":"production/2-advanced/cleanup-markers","slug":"/production/advanced/cleanup-markers/","permalink":"/docs/production/advanced/cleanup-markers/","draft":false,"unlisted":false,"editUrl":"https://github.com/neldivad/neldivad.github.io/tree/main/docs/production/2-advanced/cleanup-markers/cleanup-markers.mdx","tags":[],"version":"current","lastUpdatedAt":1742208977000,"frontMatter":{"title":"Cleanup Markers (Script)"},"sidebar":"tutorialSidebar","previous":{"title":"Advanced (FL)","permalink":"/docs/production/advanced/"},"next":{"title":"FL Pianoroll Tool - Scripts","permalink":"/docs/production/advanced/fl-pyscripts/"}}');var s=n(4848),i=n(8453);const a={title:"Cleanup Markers (Script)"},o=void 0,d={},c=[{value:"Problem",id:"problem",level:2},{value:"Pyscript solution",id:"pyscript-solution",level:2}];function m(e){const r={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"problem",children:"Problem"}),"\n",(0,s.jsx)(r.p,{children:"I have an annoying problem with FL studio when trying to do arrangement with my method."}),"\n",(0,s.jsx)(r.p,{children:"In FL Studio, the piano roll typically guards against stacked time markers."}),"\n",(0,s.jsx)(t,{children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("summary",{children:"Autoguard from stacked markers"}),"\r\n",(0,s.jsx)(r.img,{src:n(63).A+"",width:"1037",height:"606"})]})}),"\n",(0,s.jsxs)(r.p,{children:["However, if you use the ",(0,s.jsx)(r.code,{children:"CTRL + G"})," method to merge patterns from the playlist window, the piano roll will not guard against stacked markers."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)(r.p,{children:[(0,s.jsx)("summary",{children:"Example merge"}),"\r\nPre-merge"]}),(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:n(6688).A+"",width:"601",height:"314"})}),(0,s.jsx)(r.p,{children:"Post merge"}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.img,{src:n(5005).A+"",width:"537",height:"289"}),"\r\n",(0,s.jsx)(r.img,{src:n(9750).A+"",width:"715",height:"529"})]})]}),"\n",(0,s.jsx)(r.h2,{id:"pyscript-solution",children:"Pyscript solution"}),"\n",(0,s.jsx)(r.p,{children:"The following script will remove all stacked markers. Importantly, it will preserve the time signature markers!"}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Cleanup stacked markers"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"\r\nimport flpianoroll as flp\r\n\r\ndialog = \"\"\"\r\nby NEL-V\r\nversion: 0.1\r\n\r\nRemoves all stacked time signature markers from piano roll, typically caused by Alt + G on patterns. \r\n\"\"\"\r\n\r\ndef createDialog():\r\n    # Find stacked time signature markers (markers at the same time position)\r\n    time_sig_markers_by_time = {}\r\n    \r\n    for m in range(flp.score.markerCount):\r\n        marker = flp.score.getMarker(m)\r\n        \r\n        # Check if this is a time signature marker (has tsnum and tsden properties)\r\n        if hasattr(marker, 'tsnum') and hasattr(marker, 'tsden'):\r\n            time = marker.time\r\n            \r\n            if time not in time_sig_markers_by_time:\r\n                time_sig_markers_by_time[time] = []\r\n            \r\n            time_sig_markers_by_time[time].append({\r\n                'index': m,\r\n                'tsnum': marker.tsnum,\r\n                'tsden': marker.tsden,\r\n                'time': marker.time,\r\n                'name': marker.name if hasattr(marker, 'name') else \"\"\r\n            })\r\n    \r\n    # Count markers to be removed\r\n    stacked_count = 0\r\n    positions_with_stacks = 0\r\n    \r\n    for time, markers in time_sig_markers_by_time.items():\r\n        if len(markers) > 1:\r\n            stacked_count += len(markers) - 1\r\n            positions_with_stacks += 1\r\n    \r\n    # Create the dialog\r\n    title = \"Time Signature Marker Cleanup\"\r\n    \r\n    if stacked_count == 0:\r\n        description = \"No stacked time signature markers found.\"\r\n    else:\r\n        description = f\"Found {stacked_count} stacked time signature markers at {positions_with_stacks} positions.\"\r\n    \r\n    form = flp.ScriptDialog(title, dialog + \"\\n\" + description)\r\n    \r\n    if stacked_count > 0:\r\n        form.AddInputCheckbox(\"Clean up time signature markers\", False)\r\n    \r\n    # Store data for use in apply\r\n    global time_sig_data\r\n    time_sig_data = {\r\n        'stacked_count': stacked_count,\r\n        'markers_by_time': time_sig_markers_by_time\r\n    }\r\n    \r\n    return form\r\n\r\ndef apply(form):\r\n    global time_sig_data\r\n    \r\n    # Exit if \"Close\" was pressed or there are no stacked markers\r\n    if time_sig_data['stacked_count'] == 0:\r\n        return\r\n    \r\n    markers_by_time = time_sig_data['markers_by_time']\r\n    \r\n    # Create a list of indices to delete (in reverse order to avoid shifting issues)\r\n    indices_to_delete = []\r\n    \r\n    for time, markers in markers_by_time.items():\r\n        if len(markers) > 1:\r\n            # Keep the first one, mark the rest for deletion\r\n            for i in range(1, len(markers)):\r\n                indices_to_delete.append(markers[i]['index'])\r\n    \r\n    # Sort indices in descending order to avoid shifting issues\r\n    indices_to_delete.sort(reverse=True)\r\n    \r\n    # Delete the stacked markers\r\n    for index in indices_to_delete:\r\n        flp.score.deleteMarker(index)\r\n    \r\n    # Show result\r\n    flp.Utils.ShowMessage(f\"Removed {len(indices_to_delete)} stacked time signature markers.\")\r\n\n"})})]}),"\n",(0,s.jsx)(t,{children:(0,s.jsxs)(r.p,{children:[(0,s.jsx)("summary",{children:"Results"}),"\r\n",(0,s.jsx)(r.img,{src:n(5923).A+"",width:"1199",height:"621"})]})}),"\n",(0,s.jsxs)(r.p,{children:["Copy the script or go to ",(0,s.jsx)(r.a,{href:"https://github.com/neldivad/fl-pianoroll-pyscripts",children:"Github"})]})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}},9750:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/4-cbed86de595abbb27b010bc114c468a0.JPG"}}]);